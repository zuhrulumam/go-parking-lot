// Code generated by MockGen. DO NOT EDIT.
// Source: business/domain/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=business/domain/transaction/transaction.go -destination=mocks/domain/transaction/mock_transaction.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *MockDomainItf) RunInTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MockDomainItfMockRecorder) RunInTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*MockDomainItf)(nil).RunInTx), ctx, fn)
}
